{{ $CurrentContainer := where $ "ID" .Docker.CurrentContainerID | first }}

{{ $external_http_port := coalesce $.Env.HTTP_PORT "80" }}
{{ $external_https_port := coalesce $.Env.HTTPS_PORT "443" }}

{{ define "upstream" }}
	{{ if .Address }}
		{{/* If we got the containers from swarm and this container's port is published to host, use host IP:PORT */}}
		{{ if and .Container.Node.ID .Address.HostPort }}
			# {{ .Container.Node.Name }}/{{ .Container.Name }}
			server {{ .Container.Node.Address.IP }}:{{ .Address.HostPort }};
		{{/* If there is no swarm node or the port is not published on host, use container's IP:PORT */}}
		{{ else if .Network }}
			#---Name-------- {{ .Container.Name }} 
			#---IP---------- {{ .Network.IP }} 
			#---PORT-------- {{ .Address.Port }} 
			#---SERVER------ server {{ .Network.IP }}:{{ .Address.Port }}; 
			server {{ .Network.IP }}:{{ .Address.Port }};
		{{ end }}
	{{ else if .Network }}
		# {{ .Container.Name }}

		{{ if .Network.IP }}
			#---Name-------- {{ .Container.Name }} 
			#---IP---------- {{ .Network.IP }} 
			#---PORT-------- {{ .Address.Port }} 
			#---SERVER------ server {{ .Network.IP }}:{{ .Address.Port }}; 
			##server {{ .Network.IP }}:443;
				server {{ .Network.IP }}:80;
		{{ else }}
			###server 127.0.0.1 down;
		{{ end }}
	{{ end }}

{{ end }}

{{ define "ssl_policy" }}
	{{ if eq .ssl_policy "Mozilla-Modern" }}
		ssl_protocols TLSv1.3;
		{{/* nginx currently lacks ability to choose ciphers in TLS 1.3 in configuration, see https://trac.nginx.org/nginx/ticket/1529 /*}}
		{{/* a possible workaround can be modify /etc/ssl/openssl.cnf to change it globally (see https://trac.nginx.org/nginx/ticket/1529#comment:12 ) /*}}
		{{/* explicitly set ngnix default value in order to allow single servers to override the global http value */}}
		ssl_ciphers HIGH:!aNULL:!MD5;
		ssl_prefer_server_ciphers off;
	{{ else if eq .ssl_policy "Mozilla-Intermediate" }}
		ssl_protocols TLSv1.2 TLSv1.3;
		ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384';
		ssl_prefer_server_ciphers off;
	{{ else if eq .ssl_policy "Mozilla-Old" }}
		ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;
		ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA256:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA';
		ssl_prefer_server_ciphers on;
	{{ else if eq .ssl_policy "AWS-TLS-1-2-2017-01" }}
		ssl_protocols TLSv1.2 TLSv1.3;
		ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:AES128-GCM-SHA256:AES128-SHA256:AES256-GCM-SHA384:AES256-SHA256';
		ssl_prefer_server_ciphers on;
	{{ else if eq .ssl_policy "AWS-TLS-1-1-2017-01" }}
		ssl_protocols TLSv1.1 TLSv1.2 TLSv1.3;
		ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:AES128-GCM-SHA256:AES128-SHA256:AES128-SHA:AES256-GCM-SHA384:AES256-SHA256:AES256-SHA';
		ssl_prefer_server_ciphers on;
	{{ else if eq .ssl_policy "AWS-2016-08" }}
		ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;
		ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:AES128-GCM-SHA256:AES128-SHA256:AES128-SHA:AES256-GCM-SHA384:AES256-SHA256:AES256-SHA';
		ssl_prefer_server_ciphers on;
	{{ else if eq .ssl_policy "AWS-2015-05" }}
		ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;
		ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:AES128-GCM-SHA256:AES128-SHA256:AES128-SHA:AES256-GCM-SHA384:AES256-SHA256:AES256-SHA:DES-CBC3-SHA';
		ssl_prefer_server_ciphers on;
	{{ else if eq .ssl_policy "AWS-2015-03" }}
		ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;
		ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES128-SHA:DHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:AES128-GCM-SHA256:AES128-SHA256:AES128-SHA:AES256-GCM-SHA384:AES256-SHA256:AES256-SHA:DHE-DSS-AES128-SHA:DES-CBC3-SHA';
		ssl_prefer_server_ciphers on;
	{{ else if eq .ssl_policy "AWS-2015-02" }}
		ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;
		ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES128-SHA:DHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:AES128-GCM-SHA256:AES128-SHA256:AES128-SHA:AES256-GCM-SHA384:AES256-SHA256:AES256-SHA:DHE-DSS-AES128-SHA';
		ssl_prefer_server_ciphers on;
	{{ end }}
{{ end }}

# If we receive X-Forwarded-Proto, pass it through; otherwise, pass along the
# scheme used to connect to this server
map $http_x_forwarded_proto $proxy_x_forwarded_proto {
  default $http_x_forwarded_proto;
  ''      $scheme;
}

# If we receive X-Forwarded-Port, pass it through; otherwise, pass along the
# server port the client connected to
map $http_x_forwarded_port $proxy_x_forwarded_port {
  default $http_x_forwarded_port;
  ''      $server_port;
}

# If we receive Upgrade, set Connection to "upgrade"; otherwise, delete any
# Connection header that may have been passed to this server
map $http_upgrade $proxy_connection {
  default upgrade;
  '' close;
}

# Apply fix for very long server names
server_names_hash_bucket_size 128;

  client_max_body_size 16500M; 
  client_body_buffer_size 10m;
  client_header_timeout 10m;
  client_body_timeout 10m;
  proxy_connect_timeout 600;
  proxy_send_timeout 600;
  proxy_read_timeout 600;
  send_timeout 600;
  fastcgi_read_timeout 600;
  #proxy_read_timeout 600;


# Default dhparam
{{ if (exists "/etc/nginx/dhparam/dhparam.pem") }}
ssl_dhparam /etc/nginx/dhparam/dhparam.pem;
{{ end }}

# Set appropriate X-Forwarded-Ssl header
map $scheme $proxy_x_forwarded_ssl {
  default off;
  https on;
}

gzip_types text/plain text/css application/javascript application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;

log_format vhost '$host $remote_addr - $remote_user [$time_local] '
                 '"$request" $status $body_bytes_sent '
                 '"$http_referer" "$http_user_agent"';

access_log off;

{{/* Get the SSL_POLICY defined by this container, falling back to "Mozilla-Intermediate" */}}
{{ $ssl_policy := or ($.Env.SSL_POLICY) "Mozilla-Intermediate" }}
{{ template "ssl_policy" (dict "ssl_policy" $ssl_policy) }}

{{ if $.Env.RESOLVERS }}
resolver {{ $.Env.RESOLVERS }};
{{ end }}

{{ if (exists "/etc/nginx/proxy.conf") }}
include /etc/nginx/proxy.conf;
{{ else }}
# HTTP 1.1 support
proxy_http_version 1.1;
proxy_buffering off;
proxy_set_header Host $http_host;
proxy_set_header Upgrade $http_upgrade;
proxy_set_header Connection $proxy_connection;
proxy_set_header X-Real-IP $remote_addr;
proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
proxy_set_header X-Forwarded-Proto $proxy_x_forwarded_proto;
proxy_set_header X-Forwarded-Ssl $proxy_x_forwarded_ssl;
proxy_set_header X-Forwarded-Port $proxy_x_forwarded_port;

# Mitigate httpoxy attack (see README for details)
proxy_set_header Proxy "";
{{ end }}

{{ $access_log := (or (and (not $.Env.DISABLE_ACCESS_LOGS) "access_log /var/log/nginx/access.log vhost;") "") }}

{{ $enable_ipv6 := eq (or ($.Env.ENABLE_IPV6) "") "true" }}

{{ range $host, $containers := groupByMulti $ "Env.VIRTUAL_HOST" "," }}

{{ $host := trim $host }}
{{ $is_regexp := hasPrefix "~" $host }}
{{ $upstream_name := when $is_regexp (sha1 $host) $host }}

#-+++++++ UPSTREAMName-------- {{ $upstream_name }} 
#-+++++++ UPSTREAMName-------- {{ $host }} 

# {{ $host }}
upstream {{ $upstream_name }} {

	{{ if eq $upstream_name  "web.ninja.plusnetwork.cloud" }}
		server 192.168.2.20:4200;
	{{ end }}
	{{ if eq $upstream_name  "api.user.plusnetwork.cloud" }}
		server 192.168.2.10:8081;
	{{ end }}
	{{ if eq $upstream_name  "api.caller.plusnetwork.cloud" }}
		server 192.168.2.40:8000;
	{{ end }}
	{{ if eq $upstream_name  "api.uploader.plusnetwork.cloud" }}
		server 192.168.2.30:1234;
	{{ end }}

		{{ range $container := $containers }}
		{{ $addrLen := len $container.Addresses }}
	
		{{ range $knownNetwork := $CurrentContainer.Networks }}
			{{ range $containerNetwork := $container.Networks }}
				{{ if (and (ne $containerNetwork.Name "ingress") (or (eq $knownNetwork.Name $containerNetwork.Name) (eq $knownNetwork.Name "host"))) }}
					## Can be connected with "{{ $containerNetwork.Name }}" network jejeee
	

					{{/* If only 1 port exposed, use that */}}
					{{ if eq $addrLen 1 }}
						{{ $address := index $container.Addresses 0 }}
						{{ template "upstream" (dict "Container" $container "Address" $address "Network" $containerNetwork) }}
					{{/* If more than one port exposed, use the one matching VIRTUAL_PORT env var, falling back to standard web port 80 */}}
					{{ else }}
						{{ $port := coalesce $container.Env.VIRTUAL_PORT }}
						{{ $address := where $container.Addresses "Port" $port | first }}
						{{ template "upstream" (dict "Container" $container "Address" $address "Network" $containerNetwork) }}
					{{ end }}
				{{ else }}
					## Cannot connect to network of this container jajaa
					## server 127.0.0.1 down;
					## SE MODIFICA PARA QUE SE CONECTE 
					##{{ $port := coalesce $container.Env.VIRTUAL_PORT }}
					##{{ $address := where $container.Addresses "Port" $port | first }}
					##{{ template "upstream" (dict "Container" $container "Address" $address "Network" $containerNetwork) }}

				{{ end }}
			{{ end }}
		{{ end }}
	{{ end }}


}

{{ $default_host := or ($.Env.DEFAULT_HOST) "" }}
{{ $default_server := index (dict $host "" $default_host "default_server") $host }}

{{/* Get the VIRTUAL_PROTO defined by containers w/ the same vhost, falling back to "http" */}}
{{ $proto := trim (or (first (groupByKeys $containers "Env.VIRTUAL_PROTO")) "http") }}

{{/* Get the NETWORK_ACCESS defined by containers w/ the same vhost, falling back to "external" */}}
{{ $network_tag := or (first (groupByKeys $containers "Env.NETWORK_ACCESS")) "external" }}

{{/* Get the HTTPS_METHOD defined by containers w/ the same vhost, falling back to "redirect" */}}
{{ $https_method := or (first (groupByKeys $containers "Env.HTTPS_METHOD")) (or $.Env.HTTPS_METHOD "redirect") }}

{{/* Get the SSL_POLICY defined by containers w/ the same vhost, falling back to empty string (use default) */}}
{{ $ssl_policy := or (first (groupByKeys $containers "Env.SSL_POLICY")) "" }}

{{/* Get the HSTS defined by containers w/ the same vhost, falling back to "max-age=31536000" */}}
{{ $hsts := or (first (groupByKeys $containers "Env.HSTS")) (or $.Env.HSTS "max-age=31536000") }}

{{/* Get the VIRTUAL_ROOT By containers w/ use fastcgi root */}}
{{ $vhost_root := or (first (groupByKeys $containers "Env.VIRTUAL_ROOT")) "/var/www/public" }}


{{/* Get the first cert name defined by containers w/ the same vhost */}}
{{ $certName := (first (groupByKeys $containers "Env.CERT_NAME")) }}

{{/* Get the best matching cert  by name for the vhost. */}}
{{ $vhostCert := (closest (dir "/etc/nginx/certs") (printf "%s.crt" $host))}}

{{/* vhostCert is actually a filename so remove any suffixes since they are added later */}}
{{ $vhostCert := trimSuffix ".crt" $vhostCert }}
{{ $vhostCert := trimSuffix ".key" $vhostCert }}

{{/* Use the cert specified on the container or fallback to the best vhost match */}}
{{ $cert := (coalesce $certName $vhostCert) }}

{{ $is_https := (and (ne $https_method "nohttps") (ne $cert "") (exists (printf "/etc/nginx/certs/%s.crt" $cert)) (exists (printf "/etc/nginx/certs/%s.key" $cert))) }}
{{/* Configuracion proxy reverse http */}}		
	
	{{ if (not $is_https) }}

		{{ if eq $upstream_name  "web.ninja.plusnetwork.cloud" }}
			server {
				server_name {{ $host }};
				listen 80;
				location / {
					proxy_pass http://web.ninja.plusnetwork.cloud;
					proxy_redirect  off;
				}
			}
		{{ end }}

		{{ if eq $upstream_name  "api.user.plusnetwork.cloud" }}
			server {
				server_name {{ $host }};
				listen 80;
				location / {
					proxy_pass http://api.user.plusnetwork.cloud;
					proxy_redirect  off;
				}
			}
		{{ end }}

		{{ if eq $upstream_name  "api.caller.plusnetwork.cloud" }}
			server {
				server_name {{ $host }};
				listen 80;
				{{ $access_log }}
				location / {
					proxy_pass http://api.caller.plusnetwork.cloud;
					proxy_redirect  off;
				}
			}
		{{ end }}

		{{ if eq $upstream_name  "api.uploader.plusnetwork.cloud" }}
			server {
				server_name {{ $host }};
				listen 80;
				{{ $access_log }}
				location / {
					proxy_pass http://api.uploader.plusnetwork.cloud;
					proxy_redirect  off;
				}
			}
		{{ end }}

	{{ end }}

	{{ if $is_https }}

		{{ if eq $https_method "redirect" }}
			server {
				server_name {{ $host }};
				listen {{ $external_http_port }} {{ $default_server }};
				{{ if $enable_ipv6 }}
				listen [::]:{{ $external_http_port }} {{ $default_server }};
				{{ end }}
				{{ $access_log }}
				
				# Do not HTTPS redirect Let'sEncrypt ACME challenge
				location /.well-known/acme-challenge/ {
					auth_basic off;
					allow all;
					root /usr/share/nginx/html;
					try_files $uri =404;
					break;
				}
				
				location / {
					return 301 https://$host$request_uri;
				}
			}
		{{ end }}

			server {
				printf "-----------------------------------web.ninja.plusnetwork.cloud/etc/nginx/vhost.d/%s" $host

				server_name {{ $host }};
				listen {{ $external_https_port }} ssl http2 {{ $default_server }};
				printf "-----------------------------------web.ninja.plusnetwork.cloud/etc/nginx/vhost.d/%s" $external_https_port
				{{ if $enable_ipv6 }}
				listen [::]:{{ $external_https_port }} ssl http2 {{ $default_server }};
				{{ end }}
				{{ $access_log }}

				{{ if eq $network_tag "internal" }}
				# Only allow traffic from internal clients
				include /etc/nginx/network_internal.conf;
				{{ end }}

				{{ template "ssl_policy" (dict "ssl_policy" $ssl_policy) }}

				ssl_session_timeout 5m;
				ssl_session_cache shared:SSL:50m;
				ssl_session_tickets off;

				ssl_certificate /etc/nginx/certs/{{ (printf "%s.crt" $cert) }};
				ssl_certificate_key /etc/nginx/certs/{{ (printf "%s.key" $cert) }};

				{{ if (exists (printf "/etc/nginx/certs/%s.dhparam.pem" $cert)) }}
				ssl_dhparam {{ printf "/etc/nginx/certs/%s.dhparam.pem" $cert }};
				{{ end }}

				{{ if (exists (printf "/etc/nginx/certs/%s.chain.pem" $cert)) }}
				ssl_stapling on;
				ssl_stapling_verify on;
				ssl_trusted_certificate {{ printf "/etc/nginx/certs/%s.chain.pem" $cert }};
				{{ end }}

				{{ if (not (or (eq $https_method "noredirect") (eq $hsts "off"))) }}
				add_header Strict-Transport-Security "{{ trim $hsts }}" always;
				{{ end }}

				{{ if (exists (printf "/etc/nginx/vhost.d/%s" $host)) }}
				include {{ printf "/etc/nginx/vhost.d/%s" $host }};
				{{ else if (exists "/etc/nginx/vhost.d/default") }}
				include /etc/nginx/vhost.d/default;
				{{ end }}
				
				
				location / {
					{{ if eq $proto "uwsgi" }}
					include uwsgi_params;
					uwsgi_pass {{ trim $proto }}://{{ trim $upstream_name }};
					{{ else if eq $proto "fastcgi" }}
					root   {{ trim $vhost_root }};
					include fastcgi_params;
					fastcgi_pass {{ trim $upstream_name }};
					{{ else if eq $proto "grpc" }}
					grpc_pass {{ trim $proto }}://{{ trim $upstream_name }};
					{{ else }}
					proxy_pass {{ trim $proto }}://{{ trim $upstream_name }};
					{{ end }}

					{{ if (exists (printf "/etc/nginx/htpasswd/%s" $host)) }}
					auth_basic	"Restricted {{ $host }}";
					auth_basic_user_file	{{ (printf "/etc/nginx/htpasswd/%s" $host) }};
					{{ end }}
					{{ if (exists (printf "/etc/nginx/vhost.d/%s_location" $host)) }}
					include {{ printf "/etc/nginx/vhost.d/%s_location" $host}};
					{{ else if (exists "/etc/nginx/vhost.d/default_location") }}
					include /etc/nginx/vhost.d/default_location;
					{{ end }}
				}
				
				
				##----------------------------------------------------------------
				# upstream name equal to neftali.plusnetwork.com.mx
				{{ if eq $upstream_name  "neftali.plusnetwork.com.mx" }}
				location /static/ {
						access_log off;
						expires 1d;
						root "/app/static/";
						try_files $uri @backend;
				}
				location @backend {
					proxy_pass https://neftali.plusnetwork.com.mx;
				}
				{{ end }}
				
				##----------------------------------------------------------------

				##----------------------------------------------------------------
				# upstream name equal to web.ninja.plusnetwork.cloud
				{{ if eq $upstream_name  "web.ninja.plusnetwork.cloud/" }}
				printf "-----------------------------------web.ninja.plusnetwork.cloud/etc/nginx/vhost.d/%s" $host
				location{   
					proxy_pass  http://web.ninja.plusnetwork.cloud:10446/;
				}
				{{ end }}
				
				##----------------------------------------------------------------

				##----------------------------------------------------------------
				# upstream name equal to api.user.plusnetwork.cloud
				{{ if eq $upstream_name  "api.user.plusnetwork.cloud" }}
				location /static/ {
						access_log off;
						expires 1d;
						root "/app/static/";
						try_files $uri @backend;
				}
				location @backend {
					proxy_pass http://api.user.plusnetwork.cloud:10443;
				}
				{{ end }}
				
				##----------------------------------------------------------------
					##----------------------------------------------------------------
				# upstream name equal to api.caller.plusnetwork.cloud
				{{ if eq $upstream_name  "api.caller.plusnetwork.cloud" }}
				location /static/ {
						access_log off;
						expires 1d;
						root "/app/static/";
						try_files $uri @backend;
				}
				location @backend {
					proxy_pass http://api.caller.plusnetwork.cloud:10447;
				}
				{{ end }}
				
				##----------------------------------------------------------------
					##----------------------------------------------------------------
				# upstream name equal to api.uploader.plusnetwork.cloud
				{{ if eq $upstream_name  "api.uploader.plusnetwork.cloud" }}
				location /static/ {
						access_log off;
						expires 1d;
						root "/app/static/";
						try_files $uri @backend;
				}
				location @backend {
					proxy_pass http://api.uploader.plusnetwork.cloud:10448;
				}
				{{ end }}
				
				##----------------------------------------------------------------

				# upstream name equal to ada.plusnetwork.com.mx
				{{ if eq $upstream_name  "ada.plusnetwork.com.mx" }}
				# location  ~ \.(json) {
				location /nefkon8002/ {
						access_log off;
						expires 1d;
						root "/app/cardano/metadata.json";
						try_files $uri @backend;
				}
				location @backend {
					proxy_pass https://ada.plusnetwork.com.mx/nefkon8002/metadata.json;
				}
				{{ end }}




			}
	
	{{ end }}

	{{ if or (not $is_https) (eq $https_method "noredirect") }}
		{{ if (and (exists "/etc/nginx/certs/consul.dc1.plusnetwork.com.mx.csr") (exists "/etc/nginx/certs/consul.dc1.plusnetwork.com.mx.key")) }}
				server {
					server_name {{ $host }};
					listen {{ $external_https_port }} ssl http2 {{ $default_server }};
					{{ if $enable_ipv6 }}
					listen [::]:{{ $external_https_port }} ssl http2 {{ $default_server }};
					{{ end }}
					{{ $access_log }}

					{{ if eq $network_tag "internal" }}
					# Only allow traffic from internal clients
					include /etc/nginx/network_internal.conf;
					{{ end }}

					{{ if (exists (printf "/etc/nginx/vhost.d/%s" $host)) }}
					include {{ printf "/etc/nginx/vhost.d/%s" $host }};
					{{ else if (exists "/etc/nginx/vhost.d/default") }}
					include /etc/nginx/vhost.d/default;
					{{ end }}

						ssl_session_cache shared:SSL:50m;                                                                                                                                                                    
						ssl_session_tickets off;                                                                                                                                                                             
						ssl_certificate /etc/nginx/certs/consul.dc1.plusnetwork.com.mx.csr;                                                              
						ssl_certificate_key /etc/nginx/certs/consul.dc1.plusnetwork.com.mx.key;  
					location / {

					{{ if eq $proto "uwsgi" }}
						include uwsgi_params;
						uwsgi_pass {{ trim $proto }}://{{ trim $upstream_name }};
						{{ else if eq $proto "fastcgi" }}
						root   {{ trim $vhost_root }};
						include fastcgi_params;
						fastcgi_pass {{ trim $upstream_name }};
						{{ else if eq $proto "grpc" }}
						grpc_pass {{ trim $proto }}://{{ trim $upstream_name }};
						{{ else }}
						proxy_pass {{ trim $proto }}://{{ trim $upstream_name }};
						{{ end }}
						{{ if (exists (printf "/etc/nginx/htpasswd/%s" $host)) }}
						auth_basic  "Restricted {{ $host }}";
						auth_basic_user_file  {{ (printf "/etc/nginx/htpasswd/%s" $host) }};
						{{ end }}
						{{ if (exists (printf "/etc/nginx/vhost.d/%s_location" $host)) }}
						include {{ printf "/etc/nginx/vhost.d/%s_location" $host}};
						{{ else if (exists "/etc/nginx/vhost.d/default_location") }}
						include /etc/nginx/vhost.d/default_location;
						{{ end }}

					}
				}
		{{ end }}
	{{ end }}

{{ end }}
